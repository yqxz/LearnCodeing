	DEL key [key ...]
	删除给定的一个或多个 key 。
	被删除 key 的数量。
	
	DUMP key
	序列化给定 key ，并返回被序列化的值，使用 RESTORE 命令可以将这个值反序列化为 Redis 键。
	如果 key 不存在，那么返回 nil 。
	否则，返回序列化之后的值。
	
	EXISTS key
	检查给定 key 是否存在。s
	若 key 存在，返回 1 ，否则返回 0 。
	
	EXPIRE key seconds
	为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。
	设置成功返回 1 。
	当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0 。
	
	EXPIREAT key timestamp
	为 key 设置生存时间     接受的时间参数是 UNIX 时间戳(unix timestamp)。
	如果生存时间设置成功，返回 1 。当 key 不存在或没办法设置生存时间，返回 0 。
	
	KEYS pattern
	查找所有符合给定模式 pattern 的 key 。
	符合给定模式的 key 列表。
	
	MOVE key db
	将当前数据库的 key 移动到给定的数据库 db 当中。
	
	
	PERSIST key
	移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key )。
	
	PEXPIRE key milliseconds
	这个命令和 EXPIRE 命令的作用类似，但是它以毫秒为单位设置 key 的生存时间，而不像 EXPIRE 命令那样，以秒为单位。
	
	PEXPIREAT key milliseconds-timestamp
	这个命令和 EXPIREAT 命令类似，但它以毫秒为单位设置 key 的过期 unix 时间戳，而不是像 EXPIREAT 那样，以秒为单位。
	
	RANDOMKEY
	从当前数据库中随机返回(不删除)一个 key 。
	
	RENAME key newkey
	
	将 key 改名为 newkey 。
	当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。
	当 newkey 已经存在时， RENAME 命令将覆盖旧值。
	
	RENAMENX key newkey
	当且仅当 newkey 不存在时，将 key 改名为 newkey 。
	当 key 不存在时，返回一个错误。
	
	
	RESTORE key ttl serialized-value
	反序列化给定的序列化值，并将它和给定的 key 关联。
	参数 ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间。
	
	SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination]
	返回或保存给定列表、集合、有序集合 key 中经过排序的元素。
	排序默认以数字作为对象，值被解释为双精度浮点数，然后进行比较。
	
	TTL key
	以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
	
	TYPE key
	返回 key 所储存的值的类型。
	返回值：none (key不存在)		string (字符串)	list (列表)
		 set (集合)			zset (有序集)		hash (哈希表)
		 
 	SCAN  命令用于迭代当前数据库中的数据库键。
	SSCAN 命令用于迭代集合键中的元素。
	HSCAN 命令用于迭代哈希键中的键值对。
	ZSCAN 命令用于迭代有序集合中的元素（包括元素成员和元素分值）
	SSCAN 命令、 HSCAN 命令和 ZSCAN 命令的第一个参数总是一个数据库键。
	而 SCAN 命令则不需要在第一个参数提供任何数据库键 —— 因为它迭代的是当前数据库中的所有数据库键。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
